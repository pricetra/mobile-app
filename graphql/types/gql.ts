/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation UpdateUserById($userId: String!, $input: UpdateUserFull!) {\n    updateUserById(userId: $userId, input: $input) {\n      id\n      email\n      phoneNumber\n      name\n      avatar\n      birthDate\n      bio\n      active\n      role\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateUserByIdDocument,
    "\n  query GetAllUsers($paginator: PaginatorInput!, $filters: UserFilter) {\n    getAllUsers(paginator:$paginator, filters:$filters) {\n      users {\n        id\n        email\n        phoneNumber\n        name\n        avatar\n        birthDate\n        bio\n        active\n        role\n        createdAt\n        updatedAt\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n": typeof types.GetAllUsersDocument,
    "\n  query ProductBillingDataByUserId($userId: ID!, $paginator: PaginatorInput!) {\n    productBillingDataByUserId(userId: $userId, paginator: $paginator) {\n      data {\n        id\n        rate\n        userId\n        user {\n          id\n          name\n          avatar\n          active\n        }\n        productId\n        product {\n          id\n          name\n          image\n          brand\n          code\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          createdAt\n          updatedAt\n        }\n        createdAt\n        paidAt\n        billingRateType\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n": typeof types.ProductBillingDataByUserIdDocument,
    "\n  mutation CreateAccount($email: String!, $name: String!, $password: String!) {\n    createAccount(input: { email: $email, name: $name, password: $password }) {\n      id\n      name\n      email\n      phoneNumber\n      createdAt\n      updatedAt\n      authPlatform\n      role\n    }\n  }\n": typeof types.CreateAccountDocument,
    "\n  mutation VerifyEmail($verificationCode: String!) {\n    verifyEmail(verificationCode: $verificationCode) {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n": typeof types.VerifyEmailDocument,
    "\n  mutation ResendVerification($email: String!) {\n    resendEmailVerificationCode(email: $email)\n  }\n": typeof types.ResendVerificationDocument,
    "\n  mutation Logout {\n    logout\n  }\n": typeof types.LogoutDocument,
    "\n  mutation UpdateProfile($input: UpdateUser!) {\n    updateProfile(input: $input) {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n": typeof types.UpdateProfileDocument,
    "\n  mutation CreateStore($input: CreateStore!) {\n    createStore(input: $input) {\n      id\n      name\n      logo\n      website\n      createdById\n      updatedById\n    }\n  }\n": typeof types.CreateStoreDocument,
    "\n  mutation CreateBranchFromFullAddress($storeId: ID!, $fullAddress: String!) {\n    createBranchWithFullAddress(storeId: $storeId, fullAddress: $fullAddress) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        zipCode\n        city\n        administrativeDivision\n      }\n    }\n  }\n": typeof types.CreateBranchFromFullAddressDocument,
    "\n  mutation CreateBranch($input: CreateBranch!) {\n    createBranch(input: $input) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        zipCode\n        city\n        administrativeDivision\n      }\n    }\n  }\n": typeof types.CreateBranchDocument,
    "\n  mutation CreateProduct($input: CreateProduct!) {\n    createProduct(input: $input) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateProductDocument,
    "\n  mutation UpdateProduct($id: ID!, $input: UpdateProduct!) {\n    updateProduct(id: $id, input: $input) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateProductDocument,
    "\n  mutation CreateCategory($input: CreateCategory!) {\n    createCategory(input:$input) {\n      id\n      name\n      path\n      expandedPathname\n      categoryAlias\n      depth\n    }\n  }\n": typeof types.CreateCategoryDocument,
    "\n  mutation CreatePrice($input: CreatePrice!) {\n    createPrice(input: $input) {\n      id\n      amount\n      currencyCode\n      productId\n      product {\n        id\n        name\n        brand\n        category {\n          id\n          expandedPathname\n        }\n      }\n      storeId\n      store {\n        id\n        name\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n        }\n      }\n    }\n  }\n": typeof types.CreatePriceDocument,
    "\n  mutation AddToList($listId: ID!, $productId: ID!, $stockId: ID) {\n    addToList(listId: $listId, productId: $productId, stockId: $stockId) {\n      id\n      userId\n      listId\n      productId\n      stockId\n      createdAt\n    }\n  }\n": typeof types.AddToListDocument,
    "\n  mutation RemoveFromList($listId: ID!, $productListId: ID!) {\n    removeFromList(listId: $listId, productListId: $productListId) {\n      id\n      userId\n      listId\n      productId\n      stockId\n      createdAt\n    }\n  }\n": typeof types.RemoveFromListDocument,
    "\n  query GetAllCountries {\n    getAllCountries {\n      code\n      name\n      administrativeDivisions {\n        name\n        cities\n      }\n      currency {\n        currencyCode\n        name\n        symbol\n        symbolNative\n        decimals\n        numToBasic\n      }\n      callingCode\n      language\n    }\n  }\n": typeof types.GetAllCountriesDocument,
    "\n  query BarcodeScan($barcode: String!, $searchMode: Boolean) {\n    barcodeScan(barcode: $barcode, searchMode: $searchMode) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.BarcodeScanDocument,
    "\n  fragment UserFields on User {\n    id\n    name\n    email\n    avatar\n    createdAt\n    updatedAt\n    active\n    authPlatform\n    authStateId\n    role\n  }\n": typeof types.UserFieldsFragmentDoc,
    "\n  query LoginInternal(\n    $email: String!\n    $password: String!\n    $ipAddress: String\n    $device: AuthDeviceType\n  ) {\n    login(email: $email, password: $password, ipAddress: $ipAddress, device: $device) {\n      token\n      user {\n        id\n        name\n        email\n        avatar\n        createdAt\n        updatedAt\n        active\n        authPlatform\n        authStateId\n        role\n      }\n    }\n  }\n": typeof types.LoginInternalDocument,
    "\n  query GoogleOAuth($accessToken: String!, $ipAddress: String, $device: AuthDeviceType) {\n    googleOAuth(accessToken: $accessToken, device: $device) {\n      token\n      user {\n        id\n        name\n        email\n        avatar\n        createdAt\n        updatedAt\n        active\n        authPlatform\n        authStateId\n        role\n      }\n      isNewUser\n    }\n  }\n": typeof types.GoogleOAuthDocument,
    "\n  query Me {\n    me {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n": typeof types.MeDocument,
    "\n  query AllProducts($paginator: PaginatorInput!, $search: ProductSearch) {\n    allProducts(paginator: $paginator, search: $search) {\n      products {\n        id\n        name\n        image\n        description\n        url\n        brand\n        code\n        color\n        model\n        categoryId\n        category {\n          id\n          name\n          expandedPathname\n          path\n        }\n        stock {\n          id\n          productId\n          storeId\n          store {\n            id\n            name\n            logo\n          }\n          branchId\n          branch {\n            id\n            name\n            address {\n              id\n              latitude\n              longitude\n              mapsLink\n              fullAddress\n              city\n              administrativeDivision\n              zipCode\n              country\n              distance\n            }\n          }\n          latestPriceId\n          latestPrice {\n            id\n            amount\n            currencyCode\n            createdAt\n            sale\n            originalPrice\n            condition\n            expiresAt\n          }\n        }\n        weight\n        lowestRecordedPrice\n        highestRecordedPrice\n        createdAt\n        updatedAt\n        createdBy {\n          id\n          name\n          avatar\n        }\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n": typeof types.AllProductsDocument,
    "\n  query Product($productId: ID!) {\n    product(id: $productId) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        categoryAlias\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n": typeof types.ProductDocument,
    "\n  query GetProductStocks($productId: ID!, $location: LocationInput) {\n    getProductStocks(productId: $productId, location: $location) {\n      id\n      productId\n      storeId\n      store {\n        id\n        name\n        logo\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n          distance\n        }\n      }\n      latestPriceId\n      latestPrice {\n        id\n        amount\n        currencyCode\n        sale\n        originalPrice\n        condition\n        expiresAt\n      }\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n": typeof types.GetProductStocksDocument,
    "\n  query AllStores {\n    allStores {\n      id\n      name\n      logo\n      website\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n": typeof types.AllStoresDocument,
    "\n  query FindStore($id: ID!) {\n    findStore(id: $id) {\n      id\n      name\n      logo\n      website\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n\n    allBranches(storeId: $id) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n": typeof types.FindStoreDocument,
    "\n  query AllBranches($storeId: ID!) {\n    allBranches(storeId: $storeId) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n": typeof types.AllBranchesDocument,
    "\n  query FindBranch($id: ID!, $storeId: ID!) {\n    findBranch(id: $id, storeId: $storeId) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n": typeof types.FindBranchDocument,
    "\n  query AllBrands {\n    allBrands {\n      brand\n      products\n    }\n  }\n": typeof types.AllBrandsDocument,
    "\n  query FindBranchesByDistance($lat: Float!, $lon: Float!, $radiusMeters: Int!) {\n    findBranchesByDistance(lat: $lat, lon: $lon, radiusMeters: $radiusMeters) {\n      id\n      name\n      storeId\n      addressId\n      store {\n        id\n        name\n        website\n        logo\n      }\n      address {\n        id\n        distance\n        fullAddress\n        city\n        administrativeDivision\n        zipCode\n        countryCode\n        country\n        latitude\n        longitude\n      }\n    }\n  }\n": typeof types.FindBranchesByDistanceDocument,
    "\n  query GetCategories($depth: Int, $parentId: ID) {\n    getCategories(depth: $depth, parentId: $parentId) {\n      id\n      name\n      path\n      expandedPathname\n      categoryAlias\n      depth\n    }\n  }\n": typeof types.GetCategoriesDocument,
    "\n  query MyProductBillingData($paginator: PaginatorInput!) {\n    myProductBillingData(paginator: $paginator) {\n      data {\n        id\n        rate\n        userId\n        user {\n          id\n          name\n          avatar\n          active\n        }\n        productId\n        product {\n          id\n          name\n          image\n          brand\n          code\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          createdAt\n          updatedAt\n        }\n        createdAt\n        paidAt\n        billingRateType\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n": typeof types.MyProductBillingDataDocument,
    "\n  query GetAllLists($listType: ListType) {\n    getAllLists(listType: $listType) {\n      id\n      name\n      type\n      userId\n      createdAt\n      productList {\n        id\n        listId\n        productId\n        product {\n          id\n          name\n          image\n          description\n          url\n          brand\n          code\n          color\n          model\n          categoryId\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          stock {\n            id\n            productId\n            storeId\n            store {\n              id\n              name\n              logo\n            }\n            branchId\n            branch {\n              id\n              name\n              address {\n                id\n                latitude\n                longitude\n                mapsLink\n                fullAddress\n                city\n                administrativeDivision\n                zipCode\n                country\n                distance\n              }\n            }\n            latestPriceId\n            latestPrice {\n              id\n              amount\n              currencyCode\n              createdAt\n              sale\n              originalPrice\n              condition\n              expiresAt\n            }\n          }\n          weight\n          lowestRecordedPrice\n          highestRecordedPrice\n          createdAt\n          updatedAt\n          createdBy {\n            id\n            name\n            avatar\n          }\n        }\n        stockId\n        createdAt\n      }\n    }\n  }\n": typeof types.GetAllListsDocument,
    "\n  query Stock($stockId: ID!) {\n    stock(stockId: $stockId) {\n      id\n      productId\n      storeId\n      store {\n        id\n        name\n        logo\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n          distance\n        }\n      }\n      latestPriceId\n      latestPrice {\n        id\n        amount\n        currencyCode\n        sale\n        originalPrice\n        condition\n        expiresAt\n      }\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n": typeof types.StockDocument,
};
const documents: Documents = {
    "\n  mutation UpdateUserById($userId: String!, $input: UpdateUserFull!) {\n    updateUserById(userId: $userId, input: $input) {\n      id\n      email\n      phoneNumber\n      name\n      avatar\n      birthDate\n      bio\n      active\n      role\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateUserByIdDocument,
    "\n  query GetAllUsers($paginator: PaginatorInput!, $filters: UserFilter) {\n    getAllUsers(paginator:$paginator, filters:$filters) {\n      users {\n        id\n        email\n        phoneNumber\n        name\n        avatar\n        birthDate\n        bio\n        active\n        role\n        createdAt\n        updatedAt\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n": types.GetAllUsersDocument,
    "\n  query ProductBillingDataByUserId($userId: ID!, $paginator: PaginatorInput!) {\n    productBillingDataByUserId(userId: $userId, paginator: $paginator) {\n      data {\n        id\n        rate\n        userId\n        user {\n          id\n          name\n          avatar\n          active\n        }\n        productId\n        product {\n          id\n          name\n          image\n          brand\n          code\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          createdAt\n          updatedAt\n        }\n        createdAt\n        paidAt\n        billingRateType\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n": types.ProductBillingDataByUserIdDocument,
    "\n  mutation CreateAccount($email: String!, $name: String!, $password: String!) {\n    createAccount(input: { email: $email, name: $name, password: $password }) {\n      id\n      name\n      email\n      phoneNumber\n      createdAt\n      updatedAt\n      authPlatform\n      role\n    }\n  }\n": types.CreateAccountDocument,
    "\n  mutation VerifyEmail($verificationCode: String!) {\n    verifyEmail(verificationCode: $verificationCode) {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n": types.VerifyEmailDocument,
    "\n  mutation ResendVerification($email: String!) {\n    resendEmailVerificationCode(email: $email)\n  }\n": types.ResendVerificationDocument,
    "\n  mutation Logout {\n    logout\n  }\n": types.LogoutDocument,
    "\n  mutation UpdateProfile($input: UpdateUser!) {\n    updateProfile(input: $input) {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n": types.UpdateProfileDocument,
    "\n  mutation CreateStore($input: CreateStore!) {\n    createStore(input: $input) {\n      id\n      name\n      logo\n      website\n      createdById\n      updatedById\n    }\n  }\n": types.CreateStoreDocument,
    "\n  mutation CreateBranchFromFullAddress($storeId: ID!, $fullAddress: String!) {\n    createBranchWithFullAddress(storeId: $storeId, fullAddress: $fullAddress) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        zipCode\n        city\n        administrativeDivision\n      }\n    }\n  }\n": types.CreateBranchFromFullAddressDocument,
    "\n  mutation CreateBranch($input: CreateBranch!) {\n    createBranch(input: $input) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        zipCode\n        city\n        administrativeDivision\n      }\n    }\n  }\n": types.CreateBranchDocument,
    "\n  mutation CreateProduct($input: CreateProduct!) {\n    createProduct(input: $input) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateProductDocument,
    "\n  mutation UpdateProduct($id: ID!, $input: UpdateProduct!) {\n    updateProduct(id: $id, input: $input) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateProductDocument,
    "\n  mutation CreateCategory($input: CreateCategory!) {\n    createCategory(input:$input) {\n      id\n      name\n      path\n      expandedPathname\n      categoryAlias\n      depth\n    }\n  }\n": types.CreateCategoryDocument,
    "\n  mutation CreatePrice($input: CreatePrice!) {\n    createPrice(input: $input) {\n      id\n      amount\n      currencyCode\n      productId\n      product {\n        id\n        name\n        brand\n        category {\n          id\n          expandedPathname\n        }\n      }\n      storeId\n      store {\n        id\n        name\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n        }\n      }\n    }\n  }\n": types.CreatePriceDocument,
    "\n  mutation AddToList($listId: ID!, $productId: ID!, $stockId: ID) {\n    addToList(listId: $listId, productId: $productId, stockId: $stockId) {\n      id\n      userId\n      listId\n      productId\n      stockId\n      createdAt\n    }\n  }\n": types.AddToListDocument,
    "\n  mutation RemoveFromList($listId: ID!, $productListId: ID!) {\n    removeFromList(listId: $listId, productListId: $productListId) {\n      id\n      userId\n      listId\n      productId\n      stockId\n      createdAt\n    }\n  }\n": types.RemoveFromListDocument,
    "\n  query GetAllCountries {\n    getAllCountries {\n      code\n      name\n      administrativeDivisions {\n        name\n        cities\n      }\n      currency {\n        currencyCode\n        name\n        symbol\n        symbolNative\n        decimals\n        numToBasic\n      }\n      callingCode\n      language\n    }\n  }\n": types.GetAllCountriesDocument,
    "\n  query BarcodeScan($barcode: String!, $searchMode: Boolean) {\n    barcodeScan(barcode: $barcode, searchMode: $searchMode) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n": types.BarcodeScanDocument,
    "\n  fragment UserFields on User {\n    id\n    name\n    email\n    avatar\n    createdAt\n    updatedAt\n    active\n    authPlatform\n    authStateId\n    role\n  }\n": types.UserFieldsFragmentDoc,
    "\n  query LoginInternal(\n    $email: String!\n    $password: String!\n    $ipAddress: String\n    $device: AuthDeviceType\n  ) {\n    login(email: $email, password: $password, ipAddress: $ipAddress, device: $device) {\n      token\n      user {\n        id\n        name\n        email\n        avatar\n        createdAt\n        updatedAt\n        active\n        authPlatform\n        authStateId\n        role\n      }\n    }\n  }\n": types.LoginInternalDocument,
    "\n  query GoogleOAuth($accessToken: String!, $ipAddress: String, $device: AuthDeviceType) {\n    googleOAuth(accessToken: $accessToken, device: $device) {\n      token\n      user {\n        id\n        name\n        email\n        avatar\n        createdAt\n        updatedAt\n        active\n        authPlatform\n        authStateId\n        role\n      }\n      isNewUser\n    }\n  }\n": types.GoogleOAuthDocument,
    "\n  query Me {\n    me {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n": types.MeDocument,
    "\n  query AllProducts($paginator: PaginatorInput!, $search: ProductSearch) {\n    allProducts(paginator: $paginator, search: $search) {\n      products {\n        id\n        name\n        image\n        description\n        url\n        brand\n        code\n        color\n        model\n        categoryId\n        category {\n          id\n          name\n          expandedPathname\n          path\n        }\n        stock {\n          id\n          productId\n          storeId\n          store {\n            id\n            name\n            logo\n          }\n          branchId\n          branch {\n            id\n            name\n            address {\n              id\n              latitude\n              longitude\n              mapsLink\n              fullAddress\n              city\n              administrativeDivision\n              zipCode\n              country\n              distance\n            }\n          }\n          latestPriceId\n          latestPrice {\n            id\n            amount\n            currencyCode\n            createdAt\n            sale\n            originalPrice\n            condition\n            expiresAt\n          }\n        }\n        weight\n        lowestRecordedPrice\n        highestRecordedPrice\n        createdAt\n        updatedAt\n        createdBy {\n          id\n          name\n          avatar\n        }\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n": types.AllProductsDocument,
    "\n  query Product($productId: ID!) {\n    product(id: $productId) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        categoryAlias\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n": types.ProductDocument,
    "\n  query GetProductStocks($productId: ID!, $location: LocationInput) {\n    getProductStocks(productId: $productId, location: $location) {\n      id\n      productId\n      storeId\n      store {\n        id\n        name\n        logo\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n          distance\n        }\n      }\n      latestPriceId\n      latestPrice {\n        id\n        amount\n        currencyCode\n        sale\n        originalPrice\n        condition\n        expiresAt\n      }\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n": types.GetProductStocksDocument,
    "\n  query AllStores {\n    allStores {\n      id\n      name\n      logo\n      website\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n": types.AllStoresDocument,
    "\n  query FindStore($id: ID!) {\n    findStore(id: $id) {\n      id\n      name\n      logo\n      website\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n\n    allBranches(storeId: $id) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n": types.FindStoreDocument,
    "\n  query AllBranches($storeId: ID!) {\n    allBranches(storeId: $storeId) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n": types.AllBranchesDocument,
    "\n  query FindBranch($id: ID!, $storeId: ID!) {\n    findBranch(id: $id, storeId: $storeId) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n": types.FindBranchDocument,
    "\n  query AllBrands {\n    allBrands {\n      brand\n      products\n    }\n  }\n": types.AllBrandsDocument,
    "\n  query FindBranchesByDistance($lat: Float!, $lon: Float!, $radiusMeters: Int!) {\n    findBranchesByDistance(lat: $lat, lon: $lon, radiusMeters: $radiusMeters) {\n      id\n      name\n      storeId\n      addressId\n      store {\n        id\n        name\n        website\n        logo\n      }\n      address {\n        id\n        distance\n        fullAddress\n        city\n        administrativeDivision\n        zipCode\n        countryCode\n        country\n        latitude\n        longitude\n      }\n    }\n  }\n": types.FindBranchesByDistanceDocument,
    "\n  query GetCategories($depth: Int, $parentId: ID) {\n    getCategories(depth: $depth, parentId: $parentId) {\n      id\n      name\n      path\n      expandedPathname\n      categoryAlias\n      depth\n    }\n  }\n": types.GetCategoriesDocument,
    "\n  query MyProductBillingData($paginator: PaginatorInput!) {\n    myProductBillingData(paginator: $paginator) {\n      data {\n        id\n        rate\n        userId\n        user {\n          id\n          name\n          avatar\n          active\n        }\n        productId\n        product {\n          id\n          name\n          image\n          brand\n          code\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          createdAt\n          updatedAt\n        }\n        createdAt\n        paidAt\n        billingRateType\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n": types.MyProductBillingDataDocument,
    "\n  query GetAllLists($listType: ListType) {\n    getAllLists(listType: $listType) {\n      id\n      name\n      type\n      userId\n      createdAt\n      productList {\n        id\n        listId\n        productId\n        product {\n          id\n          name\n          image\n          description\n          url\n          brand\n          code\n          color\n          model\n          categoryId\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          stock {\n            id\n            productId\n            storeId\n            store {\n              id\n              name\n              logo\n            }\n            branchId\n            branch {\n              id\n              name\n              address {\n                id\n                latitude\n                longitude\n                mapsLink\n                fullAddress\n                city\n                administrativeDivision\n                zipCode\n                country\n                distance\n              }\n            }\n            latestPriceId\n            latestPrice {\n              id\n              amount\n              currencyCode\n              createdAt\n              sale\n              originalPrice\n              condition\n              expiresAt\n            }\n          }\n          weight\n          lowestRecordedPrice\n          highestRecordedPrice\n          createdAt\n          updatedAt\n          createdBy {\n            id\n            name\n            avatar\n          }\n        }\n        stockId\n        createdAt\n      }\n    }\n  }\n": types.GetAllListsDocument,
    "\n  query Stock($stockId: ID!) {\n    stock(stockId: $stockId) {\n      id\n      productId\n      storeId\n      store {\n        id\n        name\n        logo\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n          distance\n        }\n      }\n      latestPriceId\n      latestPrice {\n        id\n        amount\n        currencyCode\n        sale\n        originalPrice\n        condition\n        expiresAt\n      }\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n": types.StockDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUserById($userId: String!, $input: UpdateUserFull!) {\n    updateUserById(userId: $userId, input: $input) {\n      id\n      email\n      phoneNumber\n      name\n      avatar\n      birthDate\n      bio\n      active\n      role\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserById($userId: String!, $input: UpdateUserFull!) {\n    updateUserById(userId: $userId, input: $input) {\n      id\n      email\n      phoneNumber\n      name\n      avatar\n      birthDate\n      bio\n      active\n      role\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllUsers($paginator: PaginatorInput!, $filters: UserFilter) {\n    getAllUsers(paginator:$paginator, filters:$filters) {\n      users {\n        id\n        email\n        phoneNumber\n        name\n        avatar\n        birthDate\n        bio\n        active\n        role\n        createdAt\n        updatedAt\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllUsers($paginator: PaginatorInput!, $filters: UserFilter) {\n    getAllUsers(paginator:$paginator, filters:$filters) {\n      users {\n        id\n        email\n        phoneNumber\n        name\n        avatar\n        birthDate\n        bio\n        active\n        role\n        createdAt\n        updatedAt\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductBillingDataByUserId($userId: ID!, $paginator: PaginatorInput!) {\n    productBillingDataByUserId(userId: $userId, paginator: $paginator) {\n      data {\n        id\n        rate\n        userId\n        user {\n          id\n          name\n          avatar\n          active\n        }\n        productId\n        product {\n          id\n          name\n          image\n          brand\n          code\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          createdAt\n          updatedAt\n        }\n        createdAt\n        paidAt\n        billingRateType\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductBillingDataByUserId($userId: ID!, $paginator: PaginatorInput!) {\n    productBillingDataByUserId(userId: $userId, paginator: $paginator) {\n      data {\n        id\n        rate\n        userId\n        user {\n          id\n          name\n          avatar\n          active\n        }\n        productId\n        product {\n          id\n          name\n          image\n          brand\n          code\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          createdAt\n          updatedAt\n        }\n        createdAt\n        paidAt\n        billingRateType\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateAccount($email: String!, $name: String!, $password: String!) {\n    createAccount(input: { email: $email, name: $name, password: $password }) {\n      id\n      name\n      email\n      phoneNumber\n      createdAt\n      updatedAt\n      authPlatform\n      role\n    }\n  }\n"): (typeof documents)["\n  mutation CreateAccount($email: String!, $name: String!, $password: String!) {\n    createAccount(input: { email: $email, name: $name, password: $password }) {\n      id\n      name\n      email\n      phoneNumber\n      createdAt\n      updatedAt\n      authPlatform\n      role\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VerifyEmail($verificationCode: String!) {\n    verifyEmail(verificationCode: $verificationCode) {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyEmail($verificationCode: String!) {\n    verifyEmail(verificationCode: $verificationCode) {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ResendVerification($email: String!) {\n    resendEmailVerificationCode(email: $email)\n  }\n"): (typeof documents)["\n  mutation ResendVerification($email: String!) {\n    resendEmailVerificationCode(email: $email)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Logout {\n    logout\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProfile($input: UpdateUser!) {\n    updateProfile(input: $input) {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProfile($input: UpdateUser!) {\n    updateProfile(input: $input) {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateStore($input: CreateStore!) {\n    createStore(input: $input) {\n      id\n      name\n      logo\n      website\n      createdById\n      updatedById\n    }\n  }\n"): (typeof documents)["\n  mutation CreateStore($input: CreateStore!) {\n    createStore(input: $input) {\n      id\n      name\n      logo\n      website\n      createdById\n      updatedById\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateBranchFromFullAddress($storeId: ID!, $fullAddress: String!) {\n    createBranchWithFullAddress(storeId: $storeId, fullAddress: $fullAddress) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        zipCode\n        city\n        administrativeDivision\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBranchFromFullAddress($storeId: ID!, $fullAddress: String!) {\n    createBranchWithFullAddress(storeId: $storeId, fullAddress: $fullAddress) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        zipCode\n        city\n        administrativeDivision\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateBranch($input: CreateBranch!) {\n    createBranch(input: $input) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        zipCode\n        city\n        administrativeDivision\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBranch($input: CreateBranch!) {\n    createBranch(input: $input) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        zipCode\n        city\n        administrativeDivision\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProduct($input: CreateProduct!) {\n    createProduct(input: $input) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProduct($input: CreateProduct!) {\n    createProduct(input: $input) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProduct($id: ID!, $input: UpdateProduct!) {\n    updateProduct(id: $id, input: $input) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProduct($id: ID!, $input: UpdateProduct!) {\n    updateProduct(id: $id, input: $input) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCategory($input: CreateCategory!) {\n    createCategory(input:$input) {\n      id\n      name\n      path\n      expandedPathname\n      categoryAlias\n      depth\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCategory($input: CreateCategory!) {\n    createCategory(input:$input) {\n      id\n      name\n      path\n      expandedPathname\n      categoryAlias\n      depth\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePrice($input: CreatePrice!) {\n    createPrice(input: $input) {\n      id\n      amount\n      currencyCode\n      productId\n      product {\n        id\n        name\n        brand\n        category {\n          id\n          expandedPathname\n        }\n      }\n      storeId\n      store {\n        id\n        name\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePrice($input: CreatePrice!) {\n    createPrice(input: $input) {\n      id\n      amount\n      currencyCode\n      productId\n      product {\n        id\n        name\n        brand\n        category {\n          id\n          expandedPathname\n        }\n      }\n      storeId\n      store {\n        id\n        name\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddToList($listId: ID!, $productId: ID!, $stockId: ID) {\n    addToList(listId: $listId, productId: $productId, stockId: $stockId) {\n      id\n      userId\n      listId\n      productId\n      stockId\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation AddToList($listId: ID!, $productId: ID!, $stockId: ID) {\n    addToList(listId: $listId, productId: $productId, stockId: $stockId) {\n      id\n      userId\n      listId\n      productId\n      stockId\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveFromList($listId: ID!, $productListId: ID!) {\n    removeFromList(listId: $listId, productListId: $productListId) {\n      id\n      userId\n      listId\n      productId\n      stockId\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveFromList($listId: ID!, $productListId: ID!) {\n    removeFromList(listId: $listId, productListId: $productListId) {\n      id\n      userId\n      listId\n      productId\n      stockId\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllCountries {\n    getAllCountries {\n      code\n      name\n      administrativeDivisions {\n        name\n        cities\n      }\n      currency {\n        currencyCode\n        name\n        symbol\n        symbolNative\n        decimals\n        numToBasic\n      }\n      callingCode\n      language\n    }\n  }\n"): (typeof documents)["\n  query GetAllCountries {\n    getAllCountries {\n      code\n      name\n      administrativeDivisions {\n        name\n        cities\n      }\n      currency {\n        currencyCode\n        name\n        symbol\n        symbolNative\n        decimals\n        numToBasic\n      }\n      callingCode\n      language\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BarcodeScan($barcode: String!, $searchMode: Boolean) {\n    barcodeScan(barcode: $barcode, searchMode: $searchMode) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query BarcodeScan($barcode: String!, $searchMode: Boolean) {\n    barcodeScan(barcode: $barcode, searchMode: $searchMode) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserFields on User {\n    id\n    name\n    email\n    avatar\n    createdAt\n    updatedAt\n    active\n    authPlatform\n    authStateId\n    role\n  }\n"): (typeof documents)["\n  fragment UserFields on User {\n    id\n    name\n    email\n    avatar\n    createdAt\n    updatedAt\n    active\n    authPlatform\n    authStateId\n    role\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LoginInternal(\n    $email: String!\n    $password: String!\n    $ipAddress: String\n    $device: AuthDeviceType\n  ) {\n    login(email: $email, password: $password, ipAddress: $ipAddress, device: $device) {\n      token\n      user {\n        id\n        name\n        email\n        avatar\n        createdAt\n        updatedAt\n        active\n        authPlatform\n        authStateId\n        role\n      }\n    }\n  }\n"): (typeof documents)["\n  query LoginInternal(\n    $email: String!\n    $password: String!\n    $ipAddress: String\n    $device: AuthDeviceType\n  ) {\n    login(email: $email, password: $password, ipAddress: $ipAddress, device: $device) {\n      token\n      user {\n        id\n        name\n        email\n        avatar\n        createdAt\n        updatedAt\n        active\n        authPlatform\n        authStateId\n        role\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GoogleOAuth($accessToken: String!, $ipAddress: String, $device: AuthDeviceType) {\n    googleOAuth(accessToken: $accessToken, device: $device) {\n      token\n      user {\n        id\n        name\n        email\n        avatar\n        createdAt\n        updatedAt\n        active\n        authPlatform\n        authStateId\n        role\n      }\n      isNewUser\n    }\n  }\n"): (typeof documents)["\n  query GoogleOAuth($accessToken: String!, $ipAddress: String, $device: AuthDeviceType) {\n    googleOAuth(accessToken: $accessToken, device: $device) {\n      token\n      user {\n        id\n        name\n        email\n        avatar\n        createdAt\n        updatedAt\n        active\n        authPlatform\n        authStateId\n        role\n      }\n      isNewUser\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Me {\n    me {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n"): (typeof documents)["\n  query Me {\n    me {\n      id\n      name\n      email\n      avatar\n      createdAt\n      updatedAt\n      active\n      authPlatform\n      authStateId\n      role\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AllProducts($paginator: PaginatorInput!, $search: ProductSearch) {\n    allProducts(paginator: $paginator, search: $search) {\n      products {\n        id\n        name\n        image\n        description\n        url\n        brand\n        code\n        color\n        model\n        categoryId\n        category {\n          id\n          name\n          expandedPathname\n          path\n        }\n        stock {\n          id\n          productId\n          storeId\n          store {\n            id\n            name\n            logo\n          }\n          branchId\n          branch {\n            id\n            name\n            address {\n              id\n              latitude\n              longitude\n              mapsLink\n              fullAddress\n              city\n              administrativeDivision\n              zipCode\n              country\n              distance\n            }\n          }\n          latestPriceId\n          latestPrice {\n            id\n            amount\n            currencyCode\n            createdAt\n            sale\n            originalPrice\n            condition\n            expiresAt\n          }\n        }\n        weight\n        lowestRecordedPrice\n        highestRecordedPrice\n        createdAt\n        updatedAt\n        createdBy {\n          id\n          name\n          avatar\n        }\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllProducts($paginator: PaginatorInput!, $search: ProductSearch) {\n    allProducts(paginator: $paginator, search: $search) {\n      products {\n        id\n        name\n        image\n        description\n        url\n        brand\n        code\n        color\n        model\n        categoryId\n        category {\n          id\n          name\n          expandedPathname\n          path\n        }\n        stock {\n          id\n          productId\n          storeId\n          store {\n            id\n            name\n            logo\n          }\n          branchId\n          branch {\n            id\n            name\n            address {\n              id\n              latitude\n              longitude\n              mapsLink\n              fullAddress\n              city\n              administrativeDivision\n              zipCode\n              country\n              distance\n            }\n          }\n          latestPriceId\n          latestPrice {\n            id\n            amount\n            currencyCode\n            createdAt\n            sale\n            originalPrice\n            condition\n            expiresAt\n          }\n        }\n        weight\n        lowestRecordedPrice\n        highestRecordedPrice\n        createdAt\n        updatedAt\n        createdBy {\n          id\n          name\n          avatar\n        }\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Product($productId: ID!) {\n    product(id: $productId) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        categoryAlias\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n"): (typeof documents)["\n  query Product($productId: ID!) {\n    product(id: $productId) {\n      id\n      name\n      image\n      description\n      url\n      brand\n      code\n      color\n      model\n      categoryId\n      category {\n        id\n        name\n        categoryAlias\n        expandedPathname\n        path\n      }\n      weight\n      lowestRecordedPrice\n      highestRecordedPrice\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductStocks($productId: ID!, $location: LocationInput) {\n    getProductStocks(productId: $productId, location: $location) {\n      id\n      productId\n      storeId\n      store {\n        id\n        name\n        logo\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n          distance\n        }\n      }\n      latestPriceId\n      latestPrice {\n        id\n        amount\n        currencyCode\n        sale\n        originalPrice\n        condition\n        expiresAt\n      }\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductStocks($productId: ID!, $location: LocationInput) {\n    getProductStocks(productId: $productId, location: $location) {\n      id\n      productId\n      storeId\n      store {\n        id\n        name\n        logo\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n          distance\n        }\n      }\n      latestPriceId\n      latestPrice {\n        id\n        amount\n        currencyCode\n        sale\n        originalPrice\n        condition\n        expiresAt\n      }\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AllStores {\n    allStores {\n      id\n      name\n      logo\n      website\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllStores {\n    allStores {\n      id\n      name\n      logo\n      website\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FindStore($id: ID!) {\n    findStore(id: $id) {\n      id\n      name\n      logo\n      website\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n\n    allBranches(storeId: $id) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindStore($id: ID!) {\n    findStore(id: $id) {\n      id\n      name\n      logo\n      website\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n\n    allBranches(storeId: $id) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AllBranches($storeId: ID!) {\n    allBranches(storeId: $storeId) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllBranches($storeId: ID!) {\n    allBranches(storeId: $storeId) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FindBranch($id: ID!, $storeId: ID!) {\n    findBranch(id: $id, storeId: $storeId) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindBranch($id: ID!, $storeId: ID!) {\n    findBranch(id: $id, storeId: $storeId) {\n      id\n      name\n      addressId\n      storeId\n      address {\n        id\n        latitude\n        longitude\n        mapsLink\n        fullAddress\n        countryCode\n        country\n        zipCode\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AllBrands {\n    allBrands {\n      brand\n      products\n    }\n  }\n"): (typeof documents)["\n  query AllBrands {\n    allBrands {\n      brand\n      products\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FindBranchesByDistance($lat: Float!, $lon: Float!, $radiusMeters: Int!) {\n    findBranchesByDistance(lat: $lat, lon: $lon, radiusMeters: $radiusMeters) {\n      id\n      name\n      storeId\n      addressId\n      store {\n        id\n        name\n        website\n        logo\n      }\n      address {\n        id\n        distance\n        fullAddress\n        city\n        administrativeDivision\n        zipCode\n        countryCode\n        country\n        latitude\n        longitude\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindBranchesByDistance($lat: Float!, $lon: Float!, $radiusMeters: Int!) {\n    findBranchesByDistance(lat: $lat, lon: $lon, radiusMeters: $radiusMeters) {\n      id\n      name\n      storeId\n      addressId\n      store {\n        id\n        name\n        website\n        logo\n      }\n      address {\n        id\n        distance\n        fullAddress\n        city\n        administrativeDivision\n        zipCode\n        countryCode\n        country\n        latitude\n        longitude\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCategories($depth: Int, $parentId: ID) {\n    getCategories(depth: $depth, parentId: $parentId) {\n      id\n      name\n      path\n      expandedPathname\n      categoryAlias\n      depth\n    }\n  }\n"): (typeof documents)["\n  query GetCategories($depth: Int, $parentId: ID) {\n    getCategories(depth: $depth, parentId: $parentId) {\n      id\n      name\n      path\n      expandedPathname\n      categoryAlias\n      depth\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MyProductBillingData($paginator: PaginatorInput!) {\n    myProductBillingData(paginator: $paginator) {\n      data {\n        id\n        rate\n        userId\n        user {\n          id\n          name\n          avatar\n          active\n        }\n        productId\n        product {\n          id\n          name\n          image\n          brand\n          code\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          createdAt\n          updatedAt\n        }\n        createdAt\n        paidAt\n        billingRateType\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n"): (typeof documents)["\n  query MyProductBillingData($paginator: PaginatorInput!) {\n    myProductBillingData(paginator: $paginator) {\n      data {\n        id\n        rate\n        userId\n        user {\n          id\n          name\n          avatar\n          active\n        }\n        productId\n        product {\n          id\n          name\n          image\n          brand\n          code\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          createdAt\n          updatedAt\n        }\n        createdAt\n        paidAt\n        billingRateType\n      }\n      paginator {\n        next\n        page\n        prev\n        limit\n        total\n        numPages\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllLists($listType: ListType) {\n    getAllLists(listType: $listType) {\n      id\n      name\n      type\n      userId\n      createdAt\n      productList {\n        id\n        listId\n        productId\n        product {\n          id\n          name\n          image\n          description\n          url\n          brand\n          code\n          color\n          model\n          categoryId\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          stock {\n            id\n            productId\n            storeId\n            store {\n              id\n              name\n              logo\n            }\n            branchId\n            branch {\n              id\n              name\n              address {\n                id\n                latitude\n                longitude\n                mapsLink\n                fullAddress\n                city\n                administrativeDivision\n                zipCode\n                country\n                distance\n              }\n            }\n            latestPriceId\n            latestPrice {\n              id\n              amount\n              currencyCode\n              createdAt\n              sale\n              originalPrice\n              condition\n              expiresAt\n            }\n          }\n          weight\n          lowestRecordedPrice\n          highestRecordedPrice\n          createdAt\n          updatedAt\n          createdBy {\n            id\n            name\n            avatar\n          }\n        }\n        stockId\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllLists($listType: ListType) {\n    getAllLists(listType: $listType) {\n      id\n      name\n      type\n      userId\n      createdAt\n      productList {\n        id\n        listId\n        productId\n        product {\n          id\n          name\n          image\n          description\n          url\n          brand\n          code\n          color\n          model\n          categoryId\n          category {\n            id\n            name\n            expandedPathname\n            path\n          }\n          stock {\n            id\n            productId\n            storeId\n            store {\n              id\n              name\n              logo\n            }\n            branchId\n            branch {\n              id\n              name\n              address {\n                id\n                latitude\n                longitude\n                mapsLink\n                fullAddress\n                city\n                administrativeDivision\n                zipCode\n                country\n                distance\n              }\n            }\n            latestPriceId\n            latestPrice {\n              id\n              amount\n              currencyCode\n              createdAt\n              sale\n              originalPrice\n              condition\n              expiresAt\n            }\n          }\n          weight\n          lowestRecordedPrice\n          highestRecordedPrice\n          createdAt\n          updatedAt\n          createdBy {\n            id\n            name\n            avatar\n          }\n        }\n        stockId\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Stock($stockId: ID!) {\n    stock(stockId: $stockId) {\n      id\n      productId\n      storeId\n      store {\n        id\n        name\n        logo\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n          distance\n        }\n      }\n      latestPriceId\n      latestPrice {\n        id\n        amount\n        currencyCode\n        sale\n        originalPrice\n        condition\n        expiresAt\n      }\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n"): (typeof documents)["\n  query Stock($stockId: ID!) {\n    stock(stockId: $stockId) {\n      id\n      productId\n      storeId\n      store {\n        id\n        name\n        logo\n      }\n      branchId\n      branch {\n        id\n        name\n        address {\n          id\n          fullAddress\n          distance\n        }\n      }\n      latestPriceId\n      latestPrice {\n        id\n        amount\n        currencyCode\n        sale\n        originalPrice\n        condition\n        expiresAt\n      }\n      createdAt\n      updatedAt\n      createdBy {\n        id\n        name\n        avatar\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;